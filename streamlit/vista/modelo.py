import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px

import pickle
from tensorflow.keras.models import load_model
import os

import cv2


def get_demanda_data():
    script_dir = os.path.dirname(__file__)
    data_path = os.path.join(script_dir, '..', '..', 'Notebooks', 'Obtencion datos', 'demanda_evolucion.csv')
    
    demanda_data = pd.read_csv(data_path)

    if 'Fecha actualizaci√≥n' in demanda_data.columns:
        demanda_data['datetime'] = pd.to_datetime(demanda_data['Fecha actualizaci√≥n'], format='%d/%m/%Y')
    else:
        st.error("La columna 'Fecha actualizaci√≥n' no se encontr√≥ en el CSV.")
        return pd.DataFrame()

    return demanda_data


def modelo():
    
    demanda_data = get_demanda_data()

    script_dir_1 = os.path.dirname(__file__)
    data_path_1 = os.path.join(script_dir_1, '..', '..', 'Notebooks', 'ML', 'modelo_LSTM_msle.keras')
    modelo = load_model(data_path_1)
    
    script_dir_2 = os.path.dirname(__file__)
    data_path_2 = os.path.join(script_dir_2, '..', '..', 'Notebooks', 'ML', 'scaler.pkl')
    with open(data_path_2, 'rb') as file:
        escalador = pickle.load(file)

    st.markdown("<h1 style='text-align: center; color: skyblue; font-size: 2rem;'>Modelo de Machine Learning </h1>", unsafe_allow_html=True)

    st.markdown(body = """En este apartado explicaremos las decisiones tomadas para construir nuestro modelo de
                          Machine Learning y veremos las predicciones realizadas por este""")
    
    st.markdown(body = """Vistas las operaciones que componen el flujo principal de actividades de la red el√©ctrica 
                          espa√±ola, la que suscita mayor inter√©s a la hora de intentar predecir su evoluci√≥n es la 
                          demanda, ya que indica cuanta electricidad se consume o se va a consumir en nuestro pa√≠s.""")
    
    st.markdown(body = """Es por ello que hemos desarrollado una herramienta que ofrece una aproximaci√≥n a la que
                          ser√° la demanda energ√©tica de los pr√≥ximos d√≠as. Dicha herramienta se basa en un modelo
                          de Machine learning (cuyos detalles se especifican m√°s adelante) entrenado con datos
                          extraidos de la API REData, que permite extraer datos en bruto de los movimientos de 
                          la red el√©ctrica espa√±ola. [Para ver m√°s en detalle la API.](https://www.ree.es/es/apidatos)""",
                          unsafe_allow_html=True)


    st.markdown(body = """A continuaci√≥n puedes conocer en mayor profundidad el modelo 
                          o utilizarlo para predecir la evoluci√≥n de la demanda el√©ctrica.""")

    tabs1, tabs2 = st.tabs(["üìò:blue[Explicaci√≥n del modelo]", "‚ö°:blue[Evoluci√≥n de la demanda el√©ctrica]"])
    with tabs1:
        
        st.header("Explicaci√≥n del modelo")

        st.subheader ("Obtenci√≥n de datos y preparaci√≥n de los mismos para su uso en el modelo")

        st.markdown(body = """Los datos utilizados para entrenar el modelo han sido extra√≠dos, 
                           como ya se ha mencionado, de la API de REData. En concreto, como las predicciones del
                           modelo deb√≠an centrarse en la demanda el√©ctrica a futuro, se reaprovech√≥ el c√≥digo
                           utilizado para obtener el hist√≥rico de la demanda hasta el momento, utilizando los 
                           mismos datos que aquellos empleados para mostrar este.""")
        
        st.markdown(body = """Una vez obtenidos los datos, se revis√≥ la posible existencia de NaN's y/o outliers.
                           Al no haber ninguno, no hubo necesidad de hacer m√°s limpieza de datos.""")

        st.markdown(body = """Para el preprocesado, se elimin√≥ la columna de las fechas, dejando solo la de los valores,
                            que es la que nos interesa de cara al entrenamiento del modelo. Para evitar el data leakage,
                            antes de crear las ventanas de tama√±o T, se dividi√≥ el total de datos en conjuntos de train y 
                            test, dejando en el conjunto de test los datos √∫nicamente del √∫ltimo mes y en el de train
                            el resto del hist√≥rico. Tras esto, se escalaron los datos de ambos conjuntos y se organizaron 
                            en ventanas de tama√±o T=10 para darles el formato m√°s adecuado de cara al entrenamiento
                            del modelo.""")

        st.subheader ("Creaci√≥n del modelo")

        st.markdown(body = """Tras la realizaci√≥n de m√∫ltiples pruebas, en las que se cambiaron la capa
                            recurrente, el tipo de p√©rdida y el learning rate, finalmente la arquitectura que vimos
                            que daba mejores resultados fue la siguiente:""")
        
        code = '''  model = Sequential()

            model.add(Input(shape = (T, 1)))

            model.add(LSTM(units = 200, activation = "relu"))

            model.add(Dense(units = 64, activation = "relu")) 
            model.add(Dense(units = 32, activation = "relu")) 
            model.add(Dense(units = 16, activation = "relu")) 
            model.add(Dense(units = 1))

            model.compile(optimizer = "adam", loss = "msle")'''

        st.code(code, language='python')

        st.markdown(body = """Como se puede observar, la capa recurrente es una LSTM, ya que al tratarse 
                           de un modelo de series temporales, es importante que el modelo sea capaz de recordar 
                           a largo plazo; el tipo de activaci√≥n es relu, ya que no va a haber en principio valores negativos;
                           el optimizador es adam, ya que quer√≠amos probar con √©l diferentes learning rates, pero 
                           finalmente vimos que el que mejor funcionaba era el que viene por defecto, por eso no viene especificado; 
                           por √∫ltimo, la p√©rdida que utilizamos fue msle.""")


        st.markdown(body = """Una vez escogida la arquitectura a utilizar se entren√≥ al modelo utilizando para ello 100 √©pocas, 
                           dando como resultado la siguiente p√©rdida:""")

        #imagen_perdida = cv2.imread(filename="recursos/perdida_modelo.png")
        #imagen_perdida = cv2.cvtColor(imagen_perdida, cv2.COLOR_BGR2RGB)
        #st.image(imagen_perdida)

        st.markdown(body = """Viendo que los resultados obtenidos eran satisfactorios, se hizo el 1-step y el 
                            multiple step como comprobaci√≥n de un caso de aplicaci√≥n del modelo. Tras esto, 
                            considerando al modelo lo suficientemente bueno, se export√≥ para su uso en la web. """)

        st.markdown(body = """Predicciones 1-step""")
        #modelo_onestep = cv2.imread(r"recursos/1-step_modelo.png")
        #modelo_onestep = cv2.cvtColor(modelo_onestep, cv2.COLOR_BGR2RGB)
        #st.image(modelo_onestep)

        st.markdown(body = """Predicciones multiple step""")
        #modelo_multiple_step = cv2.imread(filename = "recursos/multiple_step_modelo.png")
        #modelo_multiple_step = cv2.cvtColor(modelo_multiple_step, cv2.COLOR_BGR2RGB)
        #st.image(modelo_multiple_step)


    with tabs2:
        st.header("Evoluci√≥n de la demanda el√©ctrica")


        st.markdown(body = """Aqu√≠ se mostrar√° la predicci√≥n de tantos d√≠as como se indique a continuaci√≥n del √∫ltimo d√≠a 
                        de actualizaci√≥n de la p√°gina, o de sus equivalentes en a√±os anteriores 
                        si se ha seleccionado otro a√±o.""")
        st.markdown(body = """Tarda unos segundo en cargar, y si se cambian los par√°metros 
                              hay que volver a esperar unos segundos.""")


        a√±os = [2024, 2023, 2022]
        a√±o = st.selectbox(label = "Elige a√±o para la proyecci√≥n de datos", options = a√±os)

        d√≠as = [2,3,4,5,6,7,8,9,10,11,12,13,14]
        n_d√≠as = st.selectbox(label  = "Di cu√°ntos d√≠as quieres predecir",
                                options = d√≠as) 


        demanda_filtrado = demanda_data[demanda_data['datetime'].dt.year==a√±o]
        demanda_filtrado = demanda_filtrado.drop (['Fecha actualizaci√≥n', 'datetime'],axis = 1)

        X = pd.DataFrame(demanda_filtrado["Energia_consumida"])
        X = escalador.transform(X)

        # "Multiple - Step Predictions"
        # Toma el √∫ltimo valor de una serie y predice el siguiente
        # Usa esa predicci√≥n para seguir haciendo predicciones.


        validation_predictions = list()

        last_x = X

        while len(validation_predictions) <= n_d√≠as:
            
            # En la primera iteraci√≥n predice el siguiente valor usando X
            # En las siguientes iteraciones usa el valor predicho anterior para predecir el siguiente
            p = modelo.predict(last_x.reshape(1, -1, 1))[0, 0]
            
            validation_predictions.append(p)
            # Desplaza los elementos en last_x hacia atras, dejando el primer elemento al final
            last_x = np.roll(last_x, -1)
            
            # Cambia el √∫ltimo elemento a la predicci√≥n
            last_x[-1] = p

        validation_predictions = pd.DataFrame(validation_predictions)
        validation_predictions = escalador.inverse_transform(validation_predictions)
        validation_predictions = pd.DataFrame(validation_predictions, columns = ["valores"])

        #Graficamos las predicciones    
        fig_pred = px.line(data_frame= validation_predictions,
                y = "valores")
        fig_pred.update_layout(title = 'Predicci√≥n de la evoluci√≥n de la demanda')
        st.plotly_chart(figure_or_data = fig_pred,
                    use_container_width = True)
















if __name__ == "__main__":
    modelo()